local PLANE_SIZE = 50
local TILE_SIZE = 0.5
local PLANE_START_POSITION = Vector3.new(0, 5, 0)
local UPDATE_INTERVAL = 0.01
local GRAVITY_FACTOR = 1.5
local BEND_SMOOTHNESS = 5
local SMOOTH_ALPHA = 0.15
local MAX_BEND_OFFSET = 5
local DEFAULT_MATERIAL = Enum.Material.Neon

local planeModel = Instance.new("Model")
planeModel.Name = "GravityPlane"
planeModel.Parent = workspace

local planeTiles = {}

for x = 0, PLANE_SIZE - 1 do
	for z = 0, PLANE_SIZE - 1 do
		local part = Instance.new("Part")
		part.Name = "PlanePart_"..x.."_"..z
		part.Size = Vector3.new(TILE_SIZE, TILE_SIZE, TILE_SIZE)
		part.Position = Vector3.new(
			PLANE_START_POSITION.X + x * TILE_SIZE,
			PLANE_START_POSITION.Y,
			PLANE_START_POSITION.Z + z * TILE_SIZE
		)
		part.Anchored = true
		part.Material = DEFAULT_MATERIAL
		part.Color = Color3.new(1, 1, 1)
		part.Parent = planeModel

		planeTiles[part] = {
			OriginalPos  = part.Position,
			CurrentOffset = 0,
			TargetOffset  = 0,
		}
	end
end

local function GetUnanchoredPartsAbovePlane()
	local unanchoredParts = {}
	for _, obj in ipairs(workspace:GetDescendants()) do
		if obj:IsA("BasePart") and (not obj.Anchored) then
			local pos = obj.Position
			if pos.X >= PLANE_START_POSITION.X 
			   and pos.X <= (PLANE_START_POSITION.X + PLANE_SIZE) 
			   and pos.Z >= PLANE_START_POSITION.Z 
			   and pos.Z <= (PLANE_START_POSITION.Z + PLANE_SIZE) 
			then
				table.insert(unanchoredParts, obj)
			end
		end
	end
	return unanchoredParts
end

local function GravityBendLoop()
	while true do
		local unanchoredParts = GetUnanchoredPartsAbovePlane()
		local maxOffset = 0
		for tilePart, tileData in pairs(planeTiles) do
			local targetOffset = 0
			if #unanchoredParts > 0 then
				for _, part in ipairs(unanchoredParts) do
					local mass = part:GetMass()
					local dist = (tileData.OriginalPos - part.Position).Magnitude
					local offsetContribution = (mass / ((dist^2 + 1) * BEND_SMOOTHNESS)) * GRAVITY_FACTOR
					targetOffset += offsetContribution
				end
			end
			targetOffset = math.min(targetOffset, MAX_BEND_OFFSET)
			tileData.TargetOffset = targetOffset
			if targetOffset > maxOffset then
				maxOffset = targetOffset
			end
		end

		for tilePart, tileData in pairs(planeTiles) do
			local oldOffset = tileData.CurrentOffset
			local newOffset = oldOffset + (tileData.TargetOffset - oldOffset) * SMOOTH_ALPHA
			tileData.CurrentOffset = newOffset
			tilePart.Position = Vector3.new(
				tileData.OriginalPos.X,
				tileData.OriginalPos.Y - newOffset,
				tileData.OriginalPos.Z
			)

			if maxOffset > 0 then
				local ratio = newOffset / maxOffset
				ratio = math.clamp(ratio, 0, 1)
				local inverse = 1 - ratio
				tilePart.Color = Color3.new(inverse, inverse, inverse)
			else
				tilePart.Color = Color3.new(1, 1, 1)
			end
		end

		task.wait(UPDATE_INTERVAL)
	end
end
task.spawn(GravityBendLoop)
