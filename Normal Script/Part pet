pcall(function()
    if setfenv then
        local originalEnv = getfenv(0)
        local secureEnv = setmetatable({}, {
            __index = originalEnv,
            __newindex = function(t, k, v)
                originalEnv[k] = v
            end
        })
        setfenv(1, secureEnv)
    end
end)

local function rStr(len)
    local s = {}
    for i = 1, len do
        s[i] = utf8.char(math.random(0x4E00, 0x9FFF))
    end
    return table.concat(s)
end

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local dSz = Vector3.new(1,1,1)
local dCf = CFrame.new(0,5,0)
local dMt = Enum.Material.Neon
local dClr = Color3.new(1,1,1)
local dTp = 0.5
local dAnc = true
local dCc = false

local rPartName = rStr(12)
local accRot = CFrame.new()

local function cPart()
    local p = Instance.new("Part")
    p.Size = dSz
    p.Anchored = dAnc
    p.CanCollide = dCc
    p.Material = dMt
    p.Color = dClr
    p.Transparency = dTp
    rPartName = rStr(12)
    p.Name = rPartName
    p.Parent = workspace
    p.CFrame = dCf * accRot
    return p
end

local rotatingPart = cPart()

local function chkRec()
    if (not rotatingPart) or (not rotatingPart.Parent) then
        rotatingPart = cPart()
        return
    end
    if rotatingPart.Name ~= rPartName then
        rotatingPart:Destroy()
        rotatingPart = cPart()
        return
    end
    if rotatingPart.Anchored ~= dAnc
       or rotatingPart.CanCollide ~= dCc
       or rotatingPart.Material ~= dMt
       or rotatingPart.Color ~= dClr
       or rotatingPart.Transparency ~= dTp
    then
        rotatingPart:Destroy()
        rotatingPart = cPart()
        return
    end
end

local TPN = "Mr_nothingnesser"
local cAx = Vector3.new(0,1,0)
local tAx = cAx
local cSpd = 2
local tSpd = cSpd
local tSpinChg = 3
local oRad = 6
local oAng = 0
local oSpd = 1
local oAx = Vector3.new(0,1,0)
local tOAxChg = 5
local isChgOAx = false
local sCPos = rotatingPart.Position
local cLoc = {
    Vector3.new(0.5,0.5,0.5),
    Vector3.new(0.5,0.5,-0.5),
    Vector3.new(0.5,-0.5,0.5),
    Vector3.new(0.5,-0.5,-0.5),
    Vector3.new(-0.5,0.5,0.5),
    Vector3.new(-0.5,0.5,-0.5),
    Vector3.new(-0.5,-0.5,0.5),
    Vector3.new(-0.5,-0.5,-0.5)
}
local adjL = {
    [1] = {2,3,5},
    [2] = {1,4,6},
    [3] = {1,4,7},
    [4] = {2,3,8},
    [5] = {1,6,7},
    [6] = {2,5,8},
    [7] = {3,5,8},
    [8] = {4,6,7}
}
local cSt = {}
for i = 1, 8 do
    cSt[i] = {oldIndex = i, newIndex = i, previousIndex = i}
end
local mDur = 1.0
local mTim = 0
local tInt = 0.05
local tTim = 0

local function cnRN(obj)
    coroutine.wrap(function()
        while obj and obj.Parent do
            obj.Name = rStr(8)
            wait(math.random(5,15)/10)
        end
    end)()
end

local function sTPart(pos)
    local g = Instance.new("Part")
    g.Size = Vector3.new(0.3,0.3,0.3)
    g.Anchored = true
    g.CanCollide = false
    g.Material = Enum.Material.Neon
    g.Color = Color3.new(1,1,1)
    g.Transparency = 0
    g.CFrame = CFrame.new(pos)
    g.Parent = workspace
    g.Name = rStr(10)
    cnRN(g)
    local function sUV3(v)
        if v.Magnitude > 0 then
            return v.Unit
        else
            return Vector3.new(0,1,0)
        end
    end
    local ax = sUV3(Vector3.new(
        math.random(-100,100)/100,
        math.random(-100,100)/100,
        math.random(-100,100)/100
    ))
    local sd = math.random(180,360)
    coroutine.wrap(function()
        local lt = 0.5
        local sSz = 0.3
        local eSz = 0.001
        local sTs = 0
        local eTs = 1
        local el = 0
        while el < lt do
            local dt = RunService.Heartbeat:Wait()
            el = el + dt
            local alp = math.clamp(el / lt, 0, 1)
            local cSz = sSz + (eSz - sSz) * alp
            local cTs = sTs + (eTs - sTs) * alp
            g.Size = Vector3.new(cSz,cSz,cSz)
            g.Transparency = cTs
            local aRd = math.rad(sd * dt)
            local sCf = CFrame.fromAxisAngle(ax,aRd)
            g.CFrame = g.CFrame * sCf
        end
        g:Destroy()
    end)()
end

local function chNCT()
    local cT = {}
    local cI = {1,2,3,4,5,6,7,8}
    for i = #cI, 2, -1 do
        local j = math.random(1, i)
        cI[i], cI[j] = cI[j], cI[i]
    end
    for _, cid in ipairs(cI) do
        local st = cSt[cid]
        local cr = st.newIndex
        local pr = st.previousIndex
        local nb = adjL[cr]
        local cd = {}
        for _, n in ipairs(nb) do
            local cu = true
            if n == pr then
                cu = false
            end
            for oc, tt in pairs(cT) do
                if tt == n then
                    cu = false
                    break
                end
            end
            if cu then
                table.insert(cd, n)
            end
        end
        if #cd == 0 then
            table.insert(cd, pr)
        end
        local ch = cd[math.random(#cd)]
        st.oldIndex = cr
        st.previousIndex = cr
        st.newIndex = ch
        cT[cid] = ch
    end
end

local function gPCPos()
    local p = Players:FindFirstChild(TPN)
    if p and p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
        return p.Character.HumanoidRootPart.Position
    end
    return nil
end

local function sUV3(v)
    if v.Magnitude > 0 then
        return v.Unit
    else
        return Vector3.new(0,1,0)
    end
end

local function gRSAS()
    local na = Vector3.new(
        math.random(-100,100)/100,
        math.random(-100,100)/100,
        math.random(-100,100)/100
    )
    na = sUV3(na)
    local ns = math.random(1,5)
    return na, ns
end

local function gROA()
    local na = Vector3.new(
        math.random(-100,100)/100,
        math.random(-100,100)/100,
        math.random(-100,100)/100
    )
    return sUV3(na)
end

local function scSpin(oAx,oSpd,nAx,nSpd,dur)
    local el = 0
    while el < dur do
        local dt = RunService.Heartbeat:Wait()
        el = el + dt
        local alp = math.clamp(el / dur, 0, 1)
        local aL = oAx:Lerp(nAx, alp)
        cAx = sUV3(aL)
        cSpd = oSpd + (nSpd - oSpd) * alp
    end
    cAx = nAx
    cSpd = nSpd
end

local function scOAx(oA,nA,dur)
    local el = 0
    while el < dur do
        local dt = RunService.Heartbeat:Wait()
        el = el + dt
        local alp = math.clamp(el / dur, 0, 1)
        local aL = oA:Lerp(nA, alp)
        oAx = sUV3(aL)
    end
    isChgOAx = false
end

local lU = os.clock()
local t2n = math.random(2,4)

RunService.Heartbeat:Connect(function()
    chkRec()
    local n = os.clock()
    local d = n - lU
    lU = n
    tSpinChg = tSpinChg - d
    if tSpinChg <= 0 then
        tAx, tSpd = gRSAS()
        coroutine.wrap(function(ax, sp, na, ns)
            scSpin(ax, sp, na, ns, 1.5)
        end)(cAx, cSpd, tAx, tSpd)
        tSpinChg = math.random(2,5)
    end
    tOAxChg = tOAxChg - d
    if tOAxChg <= 0 and not isChgOAx then
        isChgOAx = true
        local nA = gROA()
        coroutine.wrap(function(oA, nA)
            scOAx(oA, nA, 1.5)
        end)(oAx, nA)
        tOAxChg = math.random(3,6)
    end
    local realCP = gPCPos()
    if not realCP then
        realCP = rotatingPart.Position
    end
    sCPos = sCPos:Lerp(realCP, 0.05)
    oAng = oAng + oSpd * d
    if oAng > math.pi * 2 then
        oAng = oAng - math.pi * 2
    end
    local bV = Vector3.new(oRad,0,0)
    local oCf = CFrame.fromAxisAngle(oAx, oAng)
    local oOf = oCf:VectorToWorldSpace(bV)
    local tPos = sCPos + oOf
    local al = 0.15
    local nPos = rotatingPart.Position:Lerp(tPos, al)
    local sAng = cSpd * d
    local sCf = CFrame.fromAxisAngle(cAx, sAng)
    accRot = sCf * accRot
    rotatingPart.CFrame = CFrame.new(nPos) * accRot
    t2n = t2n - d
    if t2n <= 0 then
        local nn = rStr(12)
        rPartName = nn
        rotatingPart.Name = nn
        t2n = math.random(2,4)
    end
    mTim = mTim + d
    tTim = tTim + d
    if mTim >= mDur then
        mTim = mTim - mDur
        chNCT()
    end
    local tt = math.clamp(mTim / mDur, 0, 1)
    if tTim >= tInt then
        tTim = 0
        for i = 1, 8 do
            local st = cSt[i]
            local oPL = cLoc[st.oldIndex]
            local nPL = cLoc[st.newIndex]
            local cL = oPL:Lerp(nPL, tt)
            local cWP = rotatingPart.CFrame:PointToWorldSpace(cL)
            sTPart(cWP)
        end
    end
end)

chNCT()
